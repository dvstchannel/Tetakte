import html
from io import BytesIO
from typing import Optional, List

from telegram import Message, Update, Bot, User, Chat
from telegram.error import BadRequest, TelegramError
from telegram.ext import run_async, CommandHandler, MessageHandler, Filters
from telegram.utils.helpers import mention_html

import tg_bot.modules.sql.global_mutes_sql as sql
from tg_bot import dispatcher, OWNER_ID, SUDO_USERS, SUPPORT_USERS, STRICT_GMUTE
from tg_bot.modules.helper_funcs.chat_status import user_admin, is_user_admin
from tg_bot.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from tg_bot.modules.helper_funcs.filters import CustomFilters
from tg_bot.modules.helper_funcs.misc import send_to_list
from tg_bot.modules.sql.users_sql import get_all_chats

GMUTE_ENFORCE_GROUP = 6


@run_async
def gmute(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("B·∫°n ch∆∞a ch·ªâ ƒë·ªãnh cho t√¥i s·∫Ω ƒë·ªì s√°t ng∆∞·ªùi n√†o?.")
        return

    if int(user_id) in SUDO_USERS:
        message.reply_text("T√¥i theo d√µi, b·∫±ng con m·∫Øt nh·ªè c·ªßa m√¨nh ... m·ªôt cu·ªôc chi·∫øn tranh d√†nh cho ng∆∞·ªùi d√πng sudo! T·∫°i sao c√°c b·∫°n l·∫°i b·∫≠t nhau?")
        return

    if int(user_id) in SUPPORT_USERS:
        message.reply_text("OOOH ai ƒë√≥ ƒëang c·ªë b·ªãt mi·ªáng ng∆∞·ªùi d√πng h·ªó tr·ª£! *l·∫•y b·ªèng ng√¥*")
        return

    if user_id == bot.id:
        message.reply_text("-_- Th·∫≠t bu·ªìn c∆∞·ªùi, h√£y t·ª± c√¢m mi·ªáng t·∫°i sao t√¥i l·∫°i kh√¥ng? R·∫•t vui.")
        return

    try:
        user_chat = bot.get_chat(user_id)
    except BadRequest as excp:
        message.reply_text(excp.message)
        return

    if user_chat.type != 'private':
        message.reply_text("ƒê√≥ kh√¥ng ph·∫£i l√† m·ªôt ng∆∞·ªùi d√πng!")
        return

    if sql.is_user_gmuted(user_id):
        if not reason:
            message.reply_text("Ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã kh√≥a m√µm; T√¥i mu·ªën thay ƒë·ªïi l√Ω do, nh∆∞ng b·∫°n ch∆∞a ƒë∆∞a cho t√¥i m·ªôt l√Ω do...")
            return

        success = sql.update_gmute_reason(user_id, user_chat.username or user_chat.first_name, reason)
        if success:
            message.reply_text("Ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã kh√≥a m√µm; T√¥i ƒë√£ ƒëi v√† c·∫≠p nh·∫≠t l√Ω do gmute!")
        else:
            message.reply_text("B·∫°n c√≥ phi·ªÅn th·ª≠ l·∫°i kh√¥ng? T√¥i nghƒ© r·∫±ng ng∆∞·ªùi n√†y ƒë√£ b·ªã t·∫Øt ti·∫øng, nh∆∞ng sau ƒë√≥ h·ªç kh√¥ng?"
                               "T√¥i r·∫•t b·ªëi r·ªëi")

        return

    message.reply_text("*ƒëang l·∫•y cu·ªôn bƒÉng keo* üòâ")

    muter = update.effective_user  # type: Optional[User]
    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} ƒë√£ b·ªã kh√≥a m√µm {} "
                 "because:\n{}".format(mention_html(muter.id, muter.first_name),
                                       mention_html(user_chat.id, user_chat.first_name), reason or "No reason given"),
                 html=True)

    sql.gmute_user(user_id, user_chat.username or user_chat.first_name, reason)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gmutes
        if not sql.does_chat_gmute(chat_id):
            continue

        try:
            bot.restrict_chat_member(chat_id, user_id, can_send_messages=False)
        except BadRequest as excp:
            if excp.message == "User is an administrator of the chat":
                pass
            elif excp.message == "Chat not found":
                pass
            elif excp.message == "Not enough rights to restrict/unrestrict chat member":
                pass
            elif excp.message == "User_not_participant":
                pass
            elif excp.message == "Peer_id_invalid":  # Suspect this happens when a group is suspended by telegram.
                pass
            elif excp.message == "Group chat was deactivated":
                pass
            elif excp.message == "Need to be inviter of a user to kick it from a basic group":
                pass
            elif excp.message == "Chat_admin_required":
                pass
            elif excp.message == "Only the creator of a basic group can kick group administrators":
                pass
            elif excp.message == "Method is available only for supergroups":
                pass
            elif excp.message == "Can't demote chat creator":
                pass
            else:
                message.reply_text("Kh√¥ng th·ªÉ t·∫Øt ti·∫øng do:: {}".format(excp.message))
                send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "Kh√¥ng th·ªÉ t·∫Øt ti·∫øng do: {}".format(excp.message))
                sql.ungmute_user(user_id)
                return
        except TelegramError:
            pass

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "gmute ho√†n th√†nh!")
    message.reply_text("M·ªôt ng∆∞·ªùi ƒë√£ b·ªã t·∫Øt ti·∫øng.")


@run_async
def ungmute(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text("B·∫°n d∆∞·ªùng nh∆∞ kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt ng∆∞·ªùi d√πng.")
        return

    user_chat = bot.get_chat(user_id)
    if user_chat.type != 'private':
        message.reply_text("ƒê√≥ kh√¥ng ph·∫£i l√† m·ªôt ng∆∞·ªùi d√πng!")
        return

    if not sql.is_user_gmuted(user_id):
        message.reply_text("Ng∆∞·ªùi d√πng n√†y kh√¥ng b·ªã t·∫Øt ti·∫øng!")
        return

    muter = update.effective_user  # type: Optional[User]

    message.reply_text("T√¥i s·∫Ω cho ph√©p {} n√≥i l·∫°i, tr√™n to√†n b·ªô nh√≥m c·ªßa t√¥i!".format(user_chat.first_name))

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} ƒë√£ t·∫Øt kh√≥a m√µm cho {}".format(mention_html(muter.id, muter.first_name),
                                                   mention_html(user_chat.id, user_chat.first_name)),
                 html=True)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gmutes
        if not sql.does_chat_gmute(chat_id):
            continue

        try:
            member = bot.get_chat_member(chat_id, user_id)
            if member.status == 'restricted':
                bot.restrict_chat_member(chat_id, int(user_id),
                                     can_send_messages=True,
                                     can_send_media_messages=True,
                                     can_send_other_messages=True,
                                     can_add_web_page_previews=True)

        except BadRequest as excp:
            if excp.message == "User is an administrator of the chat":
                pass
            elif excp.message == "Chat not found":
                pass
            elif excp.message == "Not enough rights to restrict/unrestrict chat member":
                pass
            elif excp.message == "User_not_participant":
                pass
            elif excp.message == "Method is available for supergroup and channel chats only":
                pass
            elif excp.message == "Not in the chat":
                pass
            elif excp.message == "Channel_private":
                pass
            elif excp.message == "Chat_admin_required":
                pass
            else:
                message.reply_text("Kh√¥ng th·ªÉ b·ªè t·∫Øt ti·∫øng do: {}".format(excp.message))
                bot.send_message(OWNER_ID, "Kh√¥ng th·ªÉ b·ªè t·∫Øt ti·∫øng do: {}".format(excp.message))
                return
        except TelegramError:
            pass

    sql.ungmute_user(user_id)

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "ho√†n th√†nh un-gmute!")

    message.reply_text("M·ªôt ng∆∞·ªùi ƒë√£ ƒë∆∞·ª£c b·ªè GMute.")


@run_async
def gmutelist(bot: Bot, update: Update):
    muted_users = sql.get_gmute_list()

    if not muted_users:
        update.effective_message.reply_text("Kh√¥ng c√≥ b·∫•t k·ª≥ ng∆∞·ªùi d√πng b·ªã t·∫Øt ti·∫øng n√†o! B·∫°n t·ªët h∆°n t√¥i mong ƒë·ª£i...")
        return

    mutefile = 'V·∫∑n nh·ªØng k·∫ª n√†y.\n'
    for user in muted_users:
        mutefile += "[x] {} - {}\n".format(user["name"], user["user_id"])
        if user["reason"]:
            mutefile += "L√Ω do: {}\n".format(user["reason"])

    with BytesIO(str.encode(mutefile)) as output:
        output.name = "gmutelist.txt"
        update.effective_message.reply_document(document=output, filename="gmutelist.txt",
                                                caption="ƒê√¢y l√† danh s√°ch nh·ªØng ng∆∞·ªùi d√πng hi·ªán ƒëang b·ªã ·∫©n.")


def check_and_mute(bot, update, user_id, should_message=True):
    if sql.is_user_gmuted(user_id):
        bot.restrict_chat_member(update.effective_chat.id, user_id, can_send_messages=False)
        if should_message:
            update.effective_message.reply_text("ƒê√¢y l√† m·ªôt ng∆∞·ªùi x·∫•u, t√¥i s·∫Ω im l·∫∑ng h·ªç cho b·∫°n!")


@run_async
def enforce_gmute(bot: Bot, update: Update):
    # Not using @restrict handler to avoid spamming - just ignore if cant gmute.
    if sql.does_chat_gmute(update.effective_chat.id) and update.effective_chat.get_member(bot.id).can_restrict_members:
        user = update.effective_user  # type: Optional[User]
        chat = update.effective_chat  # type: Optional[Chat]
        msg = update.effective_message  # type: Optional[Message]

        if user and not is_user_admin(chat, user.id):
            check_and_mute(bot, update, user.id, should_message=True)
        if msg.new_chat_members:
            new_members = update.effective_message.new_chat_members
            for mem in new_members:
                check_and_mute(bot, update, mem.id, should_message=True)
        if msg.reply_to_message:
            user = msg.reply_to_message.from_user  # type: Optional[User]
            if user and not is_user_admin(chat, user.id):
                check_and_mute(bot, update, user.id, should_message=True)

@run_async
@user_admin
def gmutestat(bot: Bot, update: Update, args: List[str]):
    if len(args) > 0:
        if args[0].lower() in ["on", "yes"]:
            sql.enable_gmutes(update.effective_chat.id)
            update.effective_message.reply_text("T√¥i ƒë√£ b·∫≠t gmutes trong nh√≥m n√†y. ƒêi·ªÅu n√†y s·∫Ω gi√∫p b·∫£o v·ªá b·∫°n "
                                                "t·ª´ nh·ªØng ng∆∞·ªùi g·ª≠i th∆∞ r√°c, k√Ω t·ª± kh√¥ng c√≥ m√πi v√† l≈© c·∫∑n b√£.")
        elif args[0].lower() in ["off", "no"]:
            sql.disable_gmutes(update.effective_chat.id)
            update.effective_message.reply_text("T√¥i ƒë√£ t·∫Øt gmutes trong nh√≥m n√†y. GMutes s·∫Ω kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ng∆∞·ªùi d√πng c·ªßa b·∫°n "
                                                "n·ªØa kh√¥ng. Tuy nhi√™n, b·∫°n s·∫Ω √≠t ƒë∆∞·ª£c b·∫£o v·ªá kh·ªèi l≈© c·∫∑n b√£ h∆°n!")
    else:
        update.effective_message.reply_text("H√£y cho t√¥i m·ªôt s·ªë ƒë·ªëi s·ªë ƒë·ªÉ ch·ªçn m·ªôt thi·∫øt l·∫≠p! on/off, yes/no!\n\n"
                                            "C√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa b·∫°n l√†: {}\n"
                                            "Khi True, b·∫•t k·ª≥ gmutes n√†o x·∫£y ra c≈©ng s·∫Ω x·∫£y ra trong nh√≥m c·ªßa b·∫°n. "
                                            "Khi False, h·ªç s·∫Ω kh√¥ng, b·ªè m·∫∑c b·∫°n v·ªõi s·ª± th∆∞∆°ng x√≥t c√≥ th·ªÉ "
                                            "spammers.".format(sql.does_chat_gmute(update.effective_chat.id)))


def __stats__():
    return "{} ƒë√£ b·ªã kh√≥a m√µm.".format(sql.num_gmuted_users())


def __user_info__(user_id):
    is_gmuted = sql.is_user_gmuted(user_id)

    text = "T·∫Øt ti·∫øng to√†n c·∫ßu: <b>{}</b>"
    if is_gmuted:
        text = text.format("Yes")
        user = sql.get_gmuted_user(user_id)
        if user.reason:
            text += "\nL√Ω do: {}".format(html.escape(user.reason))
    else:
        text = text.format("No")
    return text


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, user_id):
    return "Cu·ªôc tr√≤ chuy·ªán n√†y ƒëang th·ª±c thi *gmutes*: `{}`.".format(sql.does_chat_gmute(chat_id))


__help__ = """
*Admin only:*
 - /gmutestat <on/off/yes/no>: S·∫Ω v√¥ hi·ªáu h√≥a ·∫£nh h∆∞·ªüng c·ªßa t·∫Øt ti·∫øng to√†n c·∫ßu ƒë·ªëi v·ªõi nh√≥m c·ªßa b·∫°n ho·∫∑c tr·∫£ l·∫°i c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa b·∫°n.
Gmutes, c√≤n ƒë∆∞·ª£c g·ªçi l√† t·∫Øt ti·∫øng to√†n c·∫ßu, ƒë∆∞·ª£c ch·ªß s·ªü h·ªØu bot s·ª≠ d·ª•ng ƒë·ªÉ t·∫Øt ti·∫øng nh·ªØng ng∆∞·ªùi g·ª≠i spam tr√™n t·∫•t c·∫£ c√°c nh√≥m. ƒêi·ªÅu n√†y gi√∫p b·∫£o v·ªá \
b·∫°n v√† c√°c nh√≥m c·ªßa b·∫°n b·∫±ng c√°ch lo·∫°i b·ªè l≈© spam c√†ng nhanh c√†ng t·ªët. H·ªç c√≥ th·ªÉ b·ªã t·∫Øt cho nh√≥m c·ªßa b·∫°n b·∫±ng c√°ch g·ªçi \
/gmutestat
"""

__mod_name__ = "GMute"

GMUTE_HANDLER = CommandHandler("gmute", gmute, pass_args=True,
                              filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
UNGMUTE_HANDLER = CommandHandler("ungmute", ungmute, pass_args=True,
                                filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
GMUTE_LIST = CommandHandler("gmutelist", gmutelist,
                           filters=CustomFilters.sudo_filter | CustomFilters.support_filter)

GMUTE_STATUS = CommandHandler("gmutestat", gmutestat, pass_args=True, filters=Filters.group)

GMUTE_ENFORCER = MessageHandler(Filters.all & Filters.group, enforce_gmute)

dispatcher.add_handler(GMUTE_HANDLER)
dispatcher.add_handler(UNGMUTE_HANDLER)
dispatcher.add_handler(GMUTE_LIST)
dispatcher.add_handler(GMUTE_STATUS)

if STRICT_GMUTE:
    dispatcher.add_handler(GMUTE_ENFORCER, GMUTE_ENFORCE_GROUP)
